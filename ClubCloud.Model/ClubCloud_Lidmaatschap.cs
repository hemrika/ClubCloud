//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClubCloud.Model
{
    using System;
    using System.Runtime.Serialization;
    using System.Collections.Generic;
    
    using System.ComponentModel;
    using System.Runtime.CompilerServices;
    
    [Serializable]
    [KnownType(typeof(ClubCloud_Vereniging))]
    [KnownType(typeof(ClubCloud_Gebruiker))]
    [KnownType(typeof(ClubCloud_Lidmaatschapsoort))]
    [DataContract(IsReference = true)]
    
    public partial class ClubCloud_Lidmaatschap : INotifyPropertyChanged, IDataErrorInfo, INotifyDataErrorInfo
    {
    	[DataMember]
        public System.Guid Id 
    	{ 
    		get { return _id; } 
    		set { SetProperty(ref _id, value); } 
    	}
    
    	[IgnoreDataMember]
    	private System.Guid _id;
    
    	[DataMember]
        public string Bondsnummer 
    	{ 
    		get { return _bondsnummer; } 
    		set { SetProperty(ref _bondsnummer, value); } 
    	}
    
    	[IgnoreDataMember]
    	private string _bondsnummer;
    
    	[DataMember]
        public Nullable<System.Guid> SoortId 
    	{ 
    		get { return _soortId; } 
    		set { SetProperty(ref _soortId, value); } 
    	}
    
    	[IgnoreDataMember]
    	private Nullable<System.Guid> _soortId;
    
    	[DataMember]
        public System.DateTime Begin 
    	{ 
    		get { return _begin; } 
    		set { SetProperty(ref _begin, value); } 
    	}
    
    	[IgnoreDataMember]
    	private System.DateTime _begin;
    
    	[DataMember]
        public Nullable<System.DateTime> Einde 
    	{ 
    		get { return _einde; } 
    		set { SetProperty(ref _einde, value); } 
    	}
    
    	[IgnoreDataMember]
    	private Nullable<System.DateTime> _einde;
    
    	[DataMember]
        public Nullable<System.DateTime> Opzegging 
    	{ 
    		get { return _opzegging; } 
    		set { SetProperty(ref _opzegging, value); } 
    	}
    
    	[IgnoreDataMember]
    	private Nullable<System.DateTime> _opzegging;
    
    	[DataMember]
        public string InternNummer 
    	{ 
    		get { return _internNummer; } 
    		set { SetProperty(ref _internNummer, value); } 
    	}
    
    	[IgnoreDataMember]
    	private string _internNummer;
    
    	[DataMember]
        public Nullable<System.Guid> GebruikerId 
    	{ 
    		get { return _gebruikerId; } 
    		set { SetProperty(ref _gebruikerId, value); } 
    	}
    
    	[IgnoreDataMember]
    	private Nullable<System.Guid> _gebruikerId;
    
    	[DataMember]
        public Nullable<System.Guid> VerenigingId 
    	{ 
    		get { return _verenigingId; } 
    		set { SetProperty(ref _verenigingId, value); } 
    	}
    
    	[IgnoreDataMember]
    	private Nullable<System.Guid> _verenigingId;
    
    	[DataMember]
        public System.Guid PasTypeId 
    	{ 
    		get { return _pasTypeId; } 
    		set { SetProperty(ref _pasTypeId, value); } 
    	}
    
    	[IgnoreDataMember]
    	private System.Guid _pasTypeId;
    
    	[DataMember]
        public string PasTypeNaam 
    	{ 
    		get { return _pasTypeNaam; } 
    		set { SetProperty(ref _pasTypeNaam, value); } 
    	}
    
    	[IgnoreDataMember]
    	private string _pasTypeNaam;
    
    	[DataMember]
        public Nullable<System.DateTime> PasDatum 
    	{ 
    		get { return _pasDatum; } 
    		set { SetProperty(ref _pasDatum, value); } 
    	}
    
    	[IgnoreDataMember]
    	private Nullable<System.DateTime> _pasDatum;
    
    	[DataMember]
        public Nullable<System.DateTime> PasNoodDatum 
    	{ 
    		get { return _pasNoodDatum; } 
    		set { SetProperty(ref _pasNoodDatum, value); } 
    	}
    
    	[IgnoreDataMember]
    	private Nullable<System.DateTime> _pasNoodDatum;
    
    	[DataMember]
        public bool PasWedstrijd 
    	{ 
    		get { return _pasWedstrijd; } 
    		set { SetProperty(ref _pasWedstrijd, value); } 
    	}
    
    	[IgnoreDataMember]
    	private bool _pasWedstrijd;
    
    	[DataMember]
        public bool PasNieuw 
    	{ 
    		get { return _pasNieuw; } 
    		set { SetProperty(ref _pasNieuw, value); } 
    	}
    
    	[IgnoreDataMember]
    	private bool _pasNieuw;
    
    	[DataMember]
        public bool PasNood 
    	{ 
    		get { return _pasNood; } 
    		set { SetProperty(ref _pasNood, value); } 
    	}
    
    	[IgnoreDataMember]
    	private bool _pasNood;
    
    	[DataMember]
        public string PasVolgnummer 
    	{ 
    		get { return _pasVolgnummer; } 
    		set { SetProperty(ref _pasVolgnummer, value); } 
    	}
    
    	[IgnoreDataMember]
    	private string _pasVolgnummer;
    
    	[DataMember]
        public int SpeelsterkteDubbel 
    	{ 
    		get { return _speelsterkteDubbel; } 
    		set { SetProperty(ref _speelsterkteDubbel, value); } 
    	}
    
    	[IgnoreDataMember]
    	private int _speelsterkteDubbel;
    
    	[DataMember]
        public int SpeelsterkteEnkel 
    	{ 
    		get { return _speelsterkteEnkel; } 
    		set { SetProperty(ref _speelsterkteEnkel, value); } 
    	}
    
    	[IgnoreDataMember]
    	private int _speelsterkteEnkel;
    
    	[DataMember]
        public bool Autorisatie 
    	{ 
    		get { return _autorisatie; } 
    		set { SetProperty(ref _autorisatie, value); } 
    	}
    
    	[IgnoreDataMember]
    	private bool _autorisatie;
    
    	[DataMember]
        public string Actief 
    	{ 
    		get { return _actief; } 
    		set { SetProperty(ref _actief, value); } 
    	}
    
    	[IgnoreDataMember]
    	private string _actief;
    
    	[DataMember]
        public System.DateTime Gewijzigd 
    	{ 
    		get { return _gewijzigd; } 
    		set { SetProperty(ref _gewijzigd, value); } 
    	}
    
    	[IgnoreDataMember]
    	private System.DateTime _gewijzigd;
    
    
    
    	//[DataMember]
    	[IgnoreDataMember]
        public virtual ClubCloud_Vereniging ClubCloud_Vereniging { get; set; }
    
    	//[DataMember]
    	[IgnoreDataMember]
        public virtual ClubCloud_Gebruiker ClubCloud_Gebruiker { get; set; }
    
    	//[DataMember]
    	[IgnoreDataMember]
        public virtual ClubCloud_Lidmaatschapsoort ClubCloud_Lidmaatschapsoort { get; set; }
    
        public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;
    
        private Dictionary<string, string> _errors = new Dictionary<string, string>();
    
        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName] String propertyName = null)
        {
            if (object.Equals(storage, value)) return false;
    
            try
            {
                storage = value;
                this.OnPropertyChanged(propertyName);
                return true;
            }
            catch (Exception ex)
            {
                _errors.Add(propertyName, ex.Message);
                return false;
            }
                
        }
    
    
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	[IgnoreDataMember]
        public string Error
        {
            get
            {
                return string.Empty;
            }
        }
    
    	[IgnoreDataMember]
        public string this[string columnName]
        {
            get
            {
                if (_errors.ContainsKey(columnName))
                    return _errors[columnName];
                return string.Empty;
            }
        }
    
            
        public System.Collections.IEnumerable GetErrors(string propertyName)
        {
            return _errors[propertyName];
        }
    
    	[IgnoreDataMember]
        public bool HasErrors
        {
            get 
            { 
                if(_errors != null)
                    return (_errors.Count > 0);
                return false;
            }
        }
    }
}
